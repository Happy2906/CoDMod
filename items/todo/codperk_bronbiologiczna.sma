/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <codmod>
#include <hamsandwich>
#include <engine>
#include <fun>
#include <fakemeta_util>

new const perk_name[] = "Bron Biologiczna";
new const perk_desc[] = "Masz 1 granat zatruwajacy";

new ma_perk[33];
new zatruwajacy[33];
new id2;
new g_msg_screenfade;
new czas[33];
new player_b_truhit[33] = 0

public plugin_init() 
{
	register_plugin(perk_name, "1.0", "GoldenKill");

	cod_register_perk(perk_name, perk_desc);

	register_event("Damage", "hedamage_event", "b", "2!0", "4!0", "5!0", "6!0")
	
	g_msg_screenfade = get_user_msgid("ScreenFade");
	
	RegisterHam(Ham_Spawn, "player", "Respawn", 1)

	register_event("SendAudio","eventGrenade","bc","2=%!MRAD_FIREINHOLE")
}

public cod_perk_enabled(id)
{
	cod_give_weapon(id, CSW_HEGRENADE);
	ma_perk[id] = true;
	player_b_truhit[id] = 1
}

public cod_perk_disabled(id)
{
	cod_take_weapon(id, CSW_HEGRENADE);
	ma_perk[id] = false;
	player_b_truhit[id] = 0
	set_user_rendering(id, kRenderFxNone, 0, 0, 0, kRenderNormal, 0);
}

public hedamage_event(id) 
{
	new MAXPLAYERS
	
	MAXPLAYERS = get_maxplayers()
	new kid = get_user_attacker(id)
	new inflictor = entity_get_edict(id, EV_ENT_dmg_inflictor)
	if (inflictor <= MAXPLAYERS)
	return PLUGIN_CONTINUE

	if(!is_valid_ent(inflictor))
	return PLUGIN_CONTINUE

	new classname2[8]
	entity_get_string(inflictor, EV_SZ_classname, classname2, 7)
	
	// if (!equal(classname2, "grenade"))
	// return PLUGIN_CONTINUE;

	if(!is_user_connected(kid))
	return PLUGIN_CONTINUE;

	if(!ma_perk[kid])
	return PLUGIN_CONTINUE;
	
	if(kid == id)
	return PLUGIN_CONTINUE;

	new Float:upVector[3]
	upVector[0] = float(read_data(4))
	upVector[1] = float(read_data(5))
	upVector[2] = float(read_data(6))
	
	id2 = id;
        new attacker = get_user_attacker(id);
	if(equal(classname2, "grenade"))
	{
		set_task(1.0, "Zatruj", id+32, _, _, "b")
		czas[id] = 10;
                zatruwajacy[id] = attacker;
	}
	return PLUGIN_CONTINUE
}

public Zatruj(id)
{
	id -= 32;
	
	if(!is_user_alive(id))
	{
		remove_task(id+32)
	}
	
	if(!czas[id])
	{
		remove_task(id+32)
		Display_Fade(id, 1<<9, 1<<9, 1<<12, 0, 255, 0, 100);
		set_user_rendering(id, kRenderFxNone, 0, 0, 0, kRenderNormal, 0);
	}
	else
	{
		czas[id]--;
		Display_Fade(id, 1<<14, 1<<14 ,1<<16, 0, 255, 0, 180);
		set_user_rendering(id, kRenderFxGlowShell, 0, 255, 0, kRenderGlow, 30)
		cod_inflict_damage(zatruwajacy[id], id, 5.0, 0.0);
	}
}

public Respawn(id)
{
        if(!is_user_connected(id2))
        return FMRES_IGNORED;

	set_user_rendering(id, kRenderFxNone, 0, 0, 0, kRenderNormal, 0);

        return FMRES_IGNORED;
}

stock Display_Fade(id,duration,holdtime,fadetype,red,green,blue,alpha)
{
	message_begin( MSG_ONE, g_msg_screenfade,{0,0,0},id );
	write_short( duration );
	write_short( holdtime );  
	write_short( fadetype );  
	write_byte ( red );	   
	write_byte ( green );     
	write_byte ( blue );  
	write_byte ( alpha );  
	message_end();
}

public eventGrenade(id) 
{
	new id = read_data(1)
	if (player_b_truhit[id] > 0)
	{
		set_task(0.1, "makeGlow", id)
	}
}

public makeGlow(id) 
{
	new grenade
	new greModel[100]
	grenade = get_grenade(id) 
	
	if( grenade ) 
	{	
		entity_get_string(grenade, EV_SZ_model, greModel, 99)

		if(equali(greModel, "models/w_hegrenade.mdl" ))	
		{
			set_rendering(grenade, kRenderFxGlowShell, 0,255,0, kRenderNormal, 255)
		}
	}
}