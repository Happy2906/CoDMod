/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <codmod>
#include <cstrike>
#include <codmod>
#include <fun>
#include <engine>
#include <fakemeta>
#include <xs>

#define MAX 32

new const perk_name[] = "Napalm";
new const perk_desc[] = "Dostajesz 5 granatow podpalajacych";

new ma_perk[MAX+1], palenie_gracza[MAX+1];
new player_b_ogihit[33] = 0

new sprite_fire,
	sprite_smoke;

public plugin_init() 
{
	register_plugin( "Napalm", "1.0", "GoldenKill" );

	cod_register_perk(perk_name, perk_desc);

	register_event("Damage", "hedamage_event", "b", "2!0", "4!0", "5!0", "6!0")

	register_event("SendAudio","eventGrenade","bc","2=%!MRAD_FIREINHOLE")

	register_event("ResetHUD", "ResetHUD", "abe");
}

public plugin_precache()
{
	sprite_fire = precache_model("sprites/fire.spr")
	sprite_smoke = precache_model("sprites/steam1.spr")
}

public cod_perk_enabled(id)
{
	ma_perk[id] = true;
	player_b_ogihit[id] = 1
	cod_give_weapon(id, CSW_HEGRENADE);
}

public cod_perk_disabled(id)
{
	ma_perk[id] = false;
	player_b_ogihit[id] = 0
	cod_take_weapon(id, CSW_HEGRENADE);
}

public hedamage_event(id) 
{
	new MAXPLAYERS
	
	MAXPLAYERS = get_maxplayers()
	new kid = get_user_attacker(id)
	new inflictor = entity_get_edict(id, EV_ENT_dmg_inflictor)
	if (inflictor <= MAXPLAYERS)
	return PLUGIN_CONTINUE

	if(!is_valid_ent(inflictor))
	return PLUGIN_CONTINUE

	new classname2[8]
	entity_get_string(inflictor, EV_SZ_classname, classname2, 7)
	
	// if (!equal(classname2, "grenade"))
	// return PLUGIN_CONTINUE;

	if(!is_user_connected(kid))
	return PLUGIN_CONTINUE;

	if(!ma_perk[kid])
	return PLUGIN_CONTINUE;
	
	if(kid == id)
	return PLUGIN_CONTINUE;

	new Float:upVector[3]
	upVector[0] = float(read_data(4))
	upVector[1] = float(read_data(5))
	upVector[2] = float(read_data(6))
	
	new attacker = get_user_attacker(id);

	if(equal(classname2, "grenade"))
	{
		if(task_exists(id+2936))
			remove_task(id+2936);
		palenie_gracza[id] = 10;
		new data[2]
		data[0] = id
		data[1] = attacker
		set_task(0.1, "burning_flame", id+2936, data, 2, "b");
	}
	return PLUGIN_CONTINUE
}

public burning_flame(data[2])
{
	new id = data[0]
	
	if(!is_user_alive(id))
	{
		palenie_gracza[id] = 0
		remove_task(id+2936);
		return PLUGIN_CONTINUE;
	}
	
	new origin[3], flags = pev(id, pev_flags)
	get_user_origin(id, origin)
	
	if(flags & FL_INWATER || palenie_gracza[id] < 1 || !get_user_health(id))
	{
		message_begin(MSG_PVS, SVC_TEMPENTITY, origin)
		write_byte(TE_SMOKE)
		write_coord(origin[0])
		write_coord(origin[1])
		write_coord(origin[2]-50)
		write_short(sprite_smoke)
		write_byte(random_num(15,20))
		write_byte(random_num(10,20))
		message_end()
		
		remove_task(id+2936);
		return PLUGIN_CONTINUE;
	}
	
	if(flags & FL_ONGROUND)
	{
		static Float:velocity[3]
		pev(id, pev_velocity, velocity)
		xs_vec_mul_scalar(velocity, 0.5, velocity)
		set_pev(id, pev_velocity, velocity)
	}
	cod_inflict_damage(data[1], id, 5.0, 0.0, 0, 1<<24);
	
	message_begin(MSG_PVS, SVC_TEMPENTITY, origin)
	write_byte(TE_SPRITE)
	write_coord(origin[0]+random_num(-5,5))
	write_coord(origin[1]+random_num(-5,5))
	write_coord(origin[2]+random_num(-10,10))
	write_short(sprite_fire)
	write_byte(random_num(5,10))
	write_byte(200)
	message_end()
	
	palenie_gracza[id]--
	return PLUGIN_CONTINUE;
}

public eventGrenade(id) 
{
	new id = read_data(1)
	if (player_b_ogihit[id] > 0)
	{
		set_task(0.1, "makeGlow", id)
	}
}

public makeGlow(id) 
{
	new grenade
	new greModel[100]
	grenade = get_grenade(id) 
	
	if( grenade ) 
	{	
		entity_get_string(grenade, EV_SZ_model, greModel, 99)

		if(equali(greModel, "models/w_hegrenade.mdl" ))	
		{
			set_rendering(grenade, kRenderFxGlowShell, 255,0,0, kRenderNormal, 255)
		}
	}
}

public ResetHUD(id)

	set_task(0.1, "ResetHUDx", id);

	

public ResetHUDx(id)

{

	if(!is_user_connected(id)) return;

	

	if(!ma_perk[id]) return;

	

	cs_set_user_bpammo(id, CSW_HEGRENADE, 5);

}